
exporters:
  otlphttp:
    endpoint: ${env:COLLECTOR_ENDPOINT}
    headers:
      Authorization: ${env:KM_API_KEY}
extensions:
  health_check:
    endpoint: 0.0.0.0:13133
processors:
  attributes/metrics:
    actions:
      - key: cluster
        value: ${env:KM_CLUSTER_NAME}
        action: insert
  attributes/logs:
    actions:
      - key: source
        from_attribute: name
        action: upsert
      - key: source
        from_attribute: operator_type
        action: upsert
      - key: source
        from_attribute: log.file.name
        action: upsert
      - key: source
        from_attribute: fluent.tag
        action: upsert
      - key: source
        from_attribute: service.name
        action: upsert
      - key: source
        from_attribute: project.name
        action: upsert
      - key: source
        from_attribute: serviceName
        action: upsert
      - key: source
        from_attribute: projectName
        action: upsert
      - key: source
        from_attribute: pod_name
        action: upsert
      - key: source
        from_attribute: container_name
        action: upsert
      - key: source
        from_attribute: namespace
        action: upsert
      - key: serviceName
        value: 'k8s-logs'
        action: insert
  attributes/traces:
    actions:
      - action: insert
        from_attribute: db.system
        key: km.service.name.derived
      - action: insert
        from_attribute: messaging.system
        key: km.service.name.derived
      - action: insert
        from_attribute: rpc.system
        key: km.service.name.derived
      - action: insert
        from_attribute: http.scheme
        key: km.service.name.derived
      - action: insert
        from_attribute: faas.trigger
        key: km.service.name.derived
  batch: null
  batch/2:
    send_batch_size: 10000
    timeout: 60s
  cumulativetodelta/ratecalculation:
    include:
      match_type: strict
      metrics:
        - system.network.io
        - system.disk.io
        - system.disk.operations.rate
        - system.network.packets.rate
        - system.network.errors.rate
        - system.network.dropped.rate
        - k8s.pod.network.io.rate
        - k8s.pod.network.errors.rate
        - k8s.node.network.io.rate
        - k8s.node.network.errors.rate
  deltatorate/ratecalculation:
    metrics:
      - system.network.io
      - system.disk.io
      - system.disk.operations.rate
      - system.network.packets.rate
      - system.network.errors.rate
      - system.network.dropped.rate
      - k8s.pod.network.io.rate
      - k8s.pod.network.errors.rate
      - k8s.node.network.io.rate
      - k8s.node.network.errors.rate
  groupbyattrs/filelog:
    keys:
      - k8s.pod.uid
  k8sattributes:
    auth_type: serviceAccount
    passthrough: true
    filter:
      node_from_env_var: KM_NODE_NAME
    extract:
      annotations:
        - from: pod
          key: instrumentation.kloudmate.com
          tag_name: instrumentation.kloudmate.com
        - from: namespace
          key: instrumentation.kloudmate.com
          tag_name: instrumentation.kloudmate.com
        - from: node
          key: instrumentation.kloudmate.com
          tag_name: instrumentation.kloudmate.com
      metadata:
        - k8s.pod.name
        - k8s.pod.uid
        - k8s.deployment.name
        - k8s.namespace.name
        - k8s.node.name
        - k8s.pod.start_time
        - k8s.statefulset.uid
        - k8s.replicaset.uid
        - k8s.daemonset.uid
        - k8s.deployment.uid
        - k8s.job.uid
        - k8s.pod.ip
        - k8s.daemonset.name
        - k8s.statefulset.name
        - k8s.replicaset.name
        - k8s.cronjob.name
        - k8s.job.name
    pod_association:
      - sources:
          - from: resource_attribute
            name: k8s.pod.ip
      - sources:
          - from: resource_attribute
            name: k8s.pod.uid
      - sources:
          - from: connection
  metricstransform/system:
    transforms:
      - action: insert
        experimental_match_labels:
          os.type: linux
        include: system.memory.utilization
        match_type: strict
        new_name: system.memory.utilization.consumed
        operations:
          - action: aggregate_label_values
            aggregated_values:
              - used
              - cached
            aggregation_type: sum
            label: state
            new_value: consumed
      - action: insert
        experimental_match_labels:
          os.type: darwin
        include: system.memory.utilization
        match_type: strict
        new_name: system.memory.utilization.consumed
        operations:
          - action: aggregate_label_values
            aggregated_values:
              - used
              - inactive
            aggregation_type: sum
            label: state
            new_value: consumed
      - action: update
        include: system.memory.utilization.consumed
        match_type: strict
        operations:
          - action: delete_label_value
            label: state
            label_value: free
          - action: delete_label_value
            label: state
            label_value: buffered
          - action: delete_label_value
            label: state
            label_value: slab_reclaimable
          - action: delete_label_value
            label: state
            label_value: slab_unreclaimable
  resource:
    attributes:
      - action: upsert
        from_attribute: host.name
        key: host.id
      - action: insert
        from_attribute: k8s.node.uid
        key: k8s.cluster.name
      - action: insert
        from_attribute: k8s.namespace.uid
        key: k8s.cluster.name
      - action: insert
        from_attribute: k8s.pod.uid
        key: k8s.cluster.name
      - action: insert
        from_attribute: k8s.container.name
        key: k8s.cluster.name
      - action: insert
        from_attribute: k8s.replicaset.uid
        key: k8s.cluster.name
      - action: insert
        from_attribute: k8s.statefulset.uid
        key: k8s.cluster.name
      - action: insert
        from_attribute: k8s.cronjob.uid
        key: k8s.cluster.name
      - action: insert
        from_attribute: k8s.job.uid
        key: k8s.cluster.name
      - action: insert
        from_attribute: k8s.daemonset.uid
        key: k8s.cluster.name
      - action: insert
        from_attribute: k8s.deployment.uid
        key: k8s.cluster.name
      - action: insert
        key: k8s.node.ip
        value: ${env:KM_NODE_HOST_IP}
      - action: upsert
        key: km.agent.version
        value: develop
  resource/add_node_name:
    attributes:
      - action: upsert
        key: k8s.node.name
        value: ${env:KM_NODE_NAME}
  resource/cluster:
    attributes:
      - action: upsert
        key: k8s.cluster.name
        value: ${env:KM_CLUSTER_NAME}
      - action: update
        from_attribute: k8s.node.name
        key: host.id
      - action: update
        from_attribute: k8s.node.name
        key: host.name
  resource/hostmetrics:
    attributes:
      - action: insert
        key: is.k8s.node
        value: "yes"
  resourcedetection:
    detectors:
      - env
      - system
      - docker
    override: false
    system:
      hostname_sources:
        - os
      resource_attributes:
        host.arch:
          enabled: true
        host.cpu.cache.l2.size:
          enabled: true
        host.cpu.family:
          enabled: true
        host.cpu.model.id:
          enabled: true
        host.cpu.model.name:
          enabled: true
        host.cpu.stepping:
          enabled: true
        host.cpu.vendor.id:
          enabled: true
        host.ip:
          enabled: true
        host.mac:
          enabled: true
        os.description:
          enabled: true
    timeout: 5s
  transform/add_labels:
    log_statements:
      - context: log
        statements: []
  transform/copyservicefromlogattributes:
    error_mode: ignore
    log_statements:
      - context: log
        statements:
          - set(resource.attributes["service.name"], log.attributes["service.name"]) where
            log.attributes["service.name"] != nil and resource.attributes["service.name"]
            == nil
  transform/deleteostype:
    metric_statements:
      - context: datapoint
        statements:
          - delete_key(attributes, "os.type")
  transform/extractattributes:
    error_mode: ignore
    log_statements:
      - context: resource
        statements:
          - merge_maps(resource.attributes, ParseKeyValue(resource.attributes["instrumentation.kloudmate.com"], "=",
            ","), "insert")
          - delete_key(attributes, "instrumentation.kloudmate.com")
    metric_statements:
      - context: resource
        statements:
          - merge_maps(resource.attributes, ParseKeyValue(resource.attributes["instrumentation.kloudmate.com"], "=",
            ","), "insert")
          - delete_key(attributes, "instrumentation.kloudmate.com")
    trace_statements:
      - context: resource
        statements:
          - merge_maps(resource.attributes, ParseKeyValue(resource.attributes["instrumentation.kloudmate.com"], "=",
            ","), "insert")
          - delete_key(attributes, "instrumentation.kloudmate.com")
  transform/k8sobject:
    error_mode: ignore
    log_statements:
      - context: log
        statements:
          - set(log.cache, log.body["object"])
          - set(log.attributes["k8s.object.name.derived"], log.cache["metadata"]["name"])
          - set(log.attributes["k8s.object.uid.derived"], log.cache["metadata"]["uid"])
          - set(log.attributes["k8s.object.kind.derived"], log.cache["kind"])
          - set(resource.attributes["service.name"], "k8s-yaml")
  transform/k8sobject/namespace:
    error_mode: ignore
    log_statements:
      - context: log
        statements:
          - set(log.cache, log.body)
          - set(log.attributes["k8s.object.name.derived"], log.cache["metadata"]["name"])
          - set(log.attributes["k8s.object.uid.derived"], log.cache["metadata"]["uid"])
          - set(log.attributes["k8s.object.kind.derived"], log.cache["kind"])
          - set(resource.attributes["service.name"], "k8s-yaml")
  transform/ostype:
    metric_statements:
      - context: datapoint
        statements:
          - set(attributes["os.type"], resource.attributes["os.type"])
  transform/ratecalculation/copymetric:
    error_mode: ignore
    metric_statements:
      - context: metric
        statements:
          - copy_metric(name="system.network.io.rate") where metric.name == "system.network.io"
          - copy_metric(name="system.disk.io.rate") where metric.name == "system.disk.io"
          - copy_metric(name="system.disk.operations.rate") where metric.name == "system.disk.operations"
          - copy_metric(name="system.network.packets.rate") where metric.name == "system.network.packets"
          - copy_metric(name="system.network.errors.rate") where metric.name == "system.network.errors"
          - copy_metric(name="system.network.dropped.rate") where metric.name == "system.network.dropped"
          - copy_metric(name="k8s.pod.network.io.rate") where metric.name == "k8s.pod.network.io"
          - copy_metric(name="k8s.pod.network.errors.rate") where metric.name == "k8s.pod.network.errors"
          - copy_metric(name="k8s.node.network.io.rate") where metric.name == "k8s.node.network.io"
          - copy_metric(name="k8s.node.network.errors.rate") where metric.name == "k8s.node.network.errors"
  transform/ratecalculation/sumtogauge:
    error_mode: ignore
    metric_statements:
      - context: metric
        statements:
          - convert_sum_to_gauge() where metric.name == "system.network.io"
          - convert_sum_to_gauge() where metric.name == "system.disk.io"
          - convert_sum_to_gauge() where metric.name == "system.disk.operations"
          - convert_sum_to_gauge() where metric.name == "system.network.packets"
          - convert_sum_to_gauge() where metric.name == "system.network.errors"
          - convert_sum_to_gauge() where metric.name == "system.network.dropped"
          - convert_sum_to_gauge() where metric.name == "k8s.pod.network.io"
          - convert_sum_to_gauge() where metric.name == "k8s.pod.network.errors"
          - convert_sum_to_gauge() where metric.name == "k8s.node.network.io"
          - convert_sum_to_gauge() where metric.name == "k8s.node.network.errors"
receivers:
  hostmetrics:
    collection_interval: 15s
    scrapers:
      cpu:
        metrics:
          system.cpu.frequency:
            enabled: true
          system.cpu.logical.count:
            enabled: true
          system.cpu.utilization:
            enabled: true
      disk:
        metrics:
          system.disk.io:
            enabled: true
      filesystem:
        exclude_fs_types:
          fs_types:
            - autofs
            - binfmt_misc
            - bpf
            - cgroup2
            - configfs
            - debugfs
            - devpts
            - devtmpfs
            - fusectl
            - hugetlbfs
            - iso9660
            - mqueue
            - nsfs
            - overlay
            - proc
            - procfs
            - pstore
            - rpc_pipefs
            - securityfs
            - selinuxfs
            - squashfs
            - sysfs
            - tracefs
          match_type: strict
        exclude_mount_points:
          match_type: regexp
          mount_points:
            - /dev/*
            - /proc/*
            - /sys/*
            - /run/containerd/runc/
            - /run/credentials/*
            - /run/k3s/containerd/*
            - /var/lib/containers/storage/*
            - /var/lib/docker/*
            - /var/lib/kubelet/*
            - /snap/*
        metrics:
          system.filesystem.utilization:
            enabled: true
      load:
        cpu_average: true
      memory:
        metrics:
          system.memory.utilization:
            enabled: true
      network:
        metrics:
          system.network.io:
            enabled: true
      paging: {}
      process:
        metrics:
          process.cpu.utilization:
            enabled: true
        mute_process_cgroup_error: true
        mute_process_exe_error: true
        mute_process_io_error: true
        mute_process_name_error: true
        mute_process_user_error: true
        resource_attributes:
          process.owner:
            enabled: true
      processes: {}
      system: {}
  kubeletstats:
    auth_type: serviceAccount
    collection_interval: 30s
    endpoint: ${env:KM_NODE_NAME}:10250
    extra_metadata_labels:
      - container.id
    insecure_skip_verify: true
    k8s_api_config:
      auth_type: serviceAccount
    metric_groups:
      - volume
      - node
      - pod
      - container
    metrics:
      k8s.container.cpu_limit_utilization:
        enabled: true
      k8s.container.cpu_request_utilization:
        enabled: true
      k8s.container.memory_limit_utilization:
        enabled: true
      k8s.container.memory_request_utilization:
        enabled: true
      k8s.pod.cpu_limit_utilization:
        enabled: true
      k8s.pod.cpu_request_utilization:
        enabled: true
      k8s.pod.memory_limit_utilization:
        enabled: true
      k8s.pod.memory_request_utilization:
        enabled: true
  otlp:
    protocols:
      grpc:
        endpoint: "0.0.0.0:4317"
      http:
        endpoint: "0.0.0.0:4318"
service:
  extensions:
    - health_check
  pipelines:
    logs/otlp:
      exporters:
        - otlphttp
      processors:
        - resourcedetection
        - resource
        - resource/cluster
        - attributes/logs
        - k8sattributes
        - transform/copyservicefromlogattributes
        - batch
        - batch/2
      receivers:
        - otlp
    metrics/hostmetrics:
      exporters:
        - otlphttp
      processors:
        - resourcedetection
        - resource
        - resource/hostmetrics
        - resource/cluster
        - k8sattributes
        - transform/ostype
        - metricstransform/system
        - transform/deleteostype
        - attributes/metrics
        - transform/ratecalculation/copymetric
        - cumulativetodelta/ratecalculation
        - deltatorate/ratecalculation
        - transform/ratecalculation/sumtogauge
        - batch
        - batch/2
      receivers:
        - hostmetrics
    metrics/kubeletstats:
      exporters:
        - otlphttp
      processors:
        - resourcedetection
        - resource/add_node_name
        - resource
        - k8sattributes
        - resource/cluster
        - transform/ratecalculation/copymetric
        - cumulativetodelta/ratecalculation
        - deltatorate/ratecalculation
        - transform/ratecalculation/sumtogauge
        - batch
        - batch/2
        - attributes/metrics
      receivers:
        - kubeletstats
    metrics/otlp:
      exporters:
        - otlphttp
      processors:
        - resourcedetection
        - resource
        - k8sattributes
        - resource/cluster
        - batch
        - batch/2
        - attributes/metrics
      receivers:
        - otlp
    traces/otlp:
      exporters:
        - otlphttp
      processors:
        - resourcedetection
        - resource
        - resource/cluster
        - attributes/traces
        - k8sattributes
        - batch
        - batch/2
      receivers:
        - otlp